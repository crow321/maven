#日志等级
#TRACE：详细等级，堆栈信息
#debug：类似于System.out.print
#info：类似于Hibernate的show_sql
#warn：不影响运行， 只是提示
#error：出现异常

#全局设置
#为true时将显示logger的debug信息，默认为false
log4j.debug = false
log4j.rootLogger = info, stdout, logfile, errorlog

#输出信息到控制台的设置
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
#自定义输出格式
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.Target = System.out
#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，本处在其后指定格式
#%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
#%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。
#%n: 换行
log4j.appender.stdout.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss,SSS} [%-5p] Method:%l -- %m%n

#文件路径输出
log4j.appender.logfile = org.apache.log4j.RollingFileAppender
#默认输出到项目根目录下的logs/logfile.log中
log4j.appender.logfile.file = logs/debug.log
#产生的消息立即输出到日志文件中
log4j.appender.logfile.Append = true
#指定日志消息的输出最低层次
log4j.appender.logfile.Threshold = DEBUG
#设置产生文件的最大数量
log4j.appender.logfile.MaxBackupIndex = 5
#后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logfile.log.1文件。
#log4j.appender.logfile.MaxFileSize = 100k
#设置日志输出格式
log4j.appender.logfile.layout = org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss,SSS} [%-5p] Method:%l -- %m%n

#ERROR以上级别日志文件输出到logs/error.log
log4j.appender.errorlog = org.apache.log4j.RollingFileAppender
log4j.appender.errorlog.file = logs/error.log
log4j.appender.errorlog.Append = true
#指定日志消息的输出最低层次是ERROR
log4j.appender.errorlog.Threshold = ERROR
log4j.appender.errorlog.MaxBackupIndex = 5
log4j.appender.errorlog.layout = org.apache.log4j.PatternLayout
log4j.appender.errorlog.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss,SSS} [%-5p] Method:%l -- %m%n
